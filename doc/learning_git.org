#+TITLE: Practice on Git and Github
#+AUTHOR: Zheng Tian
#+EMAIL: zngtian@gmail.com
#+DATE: [2017-01-20 Fri]
#+OPTIONS: H:3 num:2 toc:nil

* Introduction

This file is for practicing using git and github with a mock project,
"gittest". I'll follow chapters in /Pro Git/.


* Git Basics

** Git configuration

- Use ~git config --list~
- ~git config --global user.name "Zheng Tian"~
- ~git config --global user.email "zt@example.com"~

** Get help

- ~git help <verb>~ or ~git <verb> --help~

** Create a git repository

- Use ~git init~
- Use ~git clone URL <name>~

** Check status

- ~git status~
- ~git diff~
- ~git diff --staged~

** Stage files and changes

- ~git add <filename>~
- ~git add -A~
- ~git add .~

** Commit

- ~git commit -m "message"~
- ~git commit -a -m "message"~: skip the staging area

** Remove files

- ~git rm filename~: remove the file from both working directory and
  staging area.
- ~git rm --cached file~: remove the file only from the staging area
  not in working directory.

** Move and rename file

- ~git mv file_from file_to~: file_from must have been staged.

** View commit history

- ~git log~
- ~git log -p -2~: show the difference (-p) of the last two commits
- ~git log --pretty=format:"%h %s" --graph~: show commit history in a
  pretty format with a tree-like graph.
- ~git log --since="2008-01-15"~

** Undoing things

- ~git commit --amend~

** Unstaging a staged file

- ~git reset HEAD file~

** Unmodifying a modified file

- ~git checkout -- file~.

** Working with remote

- ~git remote -v~ show all remote repository with URL
- ~git remote add [remote-name] URL~ add a remote with a short name ~pb~.
- ~git fetch [remote-name]~ only download data not merge.
- ~git pull~ fetch and merge
- ~git push [remote-name] [branch-name]~
- ~git remote show [remote-name]~
- ~git remote rename [old-remote-name] [new-remote-name]~
- ~git remote rm [remote-name]~


* Git Branching

** Create and switch branch

- ~git branch [branch-name]~
- ~git checkout [branch-name]~: commit and have a clean branch before
  switching or do stashing.
- ~git checkout -b [branch-name]~: create a branch and switch.
- ~git log --oneline --decorate --graph --all~: print out the history
  of committing and branching.

** Merge

- ~git merge [branch-name]~.
  - fast-forward merge
  - recursive merge
- ~git branch -d [branch-name]~ delete the merged and unused branch.

** Merge conflicts

- Merge conflicts happens when two branches have work on the same
  lines of a file.
- Use ~git status~ to check the conflicting file(s).
- Modify the conflicts manually.
- Or use ~git mergetool~

** Branch management

What follows is one typical workflow with branches:
- The long-live (master) branch: the most stable branch.
  - The developing branch(es): less stable than master, but use it to
    track on-going work in one or more main directions of a project.
    - The topic branch(es): the short-live branches for solving very
      specific problems.

- ~git branch -v~ see the latest commit in each branch.
- ~git branch --merged~ or ~git branch --no-merged~ show branches that
  have been merged or haven't.

** Remote branch

- ~git ls-remote [remote-name]~ and ~git remote show [remote-name]~
  show the list of remote(s) and other information.
- ~git fetch [remote-name] <refs:branches or tags>~ download the data
  from the remote into a local directory
  ~[remote-name]/[branch-name]~, but this directory is not
  workable. To work on it, do merging, ~git merge [remote]/[branch]~.
- Use ~git checkout -b [local-branch] [remote-name]/[branch-name]~ to
  create a local branch that can be worked on and track the remote
  branch.

** Pushing

- ~git push [remote] [branch]~
- ~git push [remote] [branch]:[new-branchname]~ to give the remote
  branch a different name.
- If the remote branch does not exits, git suggest using ~git push -u
  [remote] [branch]~ or ~git push --set-upstream [remote]
  [branch]~. This action triggers a pull request in github, from which
  I can choose to merge the remote branch to the existing remote
  master branch.

** Tracking branch

- Tracking branches are local branches that track upstream remote
  branch.
- ~git clone~ automatically generate a tracking branch ~origin/master~
- Use ~git checkout -b [local-branch] [remote]/[branch]~ to create a
  tracking branch for a specific remote branch.
- ~git checkout --track [remote]/[branch]~ is a shorthand for the
  command above.
- ~git branch -u [remote]/[branch]~ or ~git branch --set-upstream-to
  [remote]/[branch]~ to set up a remote upstream branch. This is
  working when the remote upstream branch exists.
- If not, use ~git push -u [remote] [branch]~ to set up a remote
  branch, which is automatically set as the local tracking branch.
- ~git branch -vv~ list local branches with their tracking branches.

** Pulling

- ~git pull~ is ~git fetch~ + ~git merge~.
- Better to use fetch and merge separately to avoid confusing.

** Delete remote branches

- ~git push [remote] --delete [branch]~

** Rebasing

*** Basic rebase
A typical workflow: See Figures 3-27 to 3-30
1. ~git checkout [topicbranch]~
2. ~git rebase [basebranch]~
3. ~git checkout [basebranch]~
4. ~git merge [topicbranch]~

*** The perils of rebasing

*Do not rebase commits that exist outside your repository.*
Excerpt From: Scott Chacon, Ben Straub. “Pro Git.” iBooks.

*** Rebase vs. Merge

Which is better, rebase or merge, depends on how you view the commit
history.
- Review 1 :: a record of what actually happened. This view value the
              intact of the committing history, preferring merging to
              rebasing.
- Review 2 :: story of how your project was made. Rebasing is like
              manipulating history but it is OK according to this
              view.



* TODO Git server

* TODO Distributed Git

* TODO Github

* TODO Git tools

** TODO Stashing and cleaning
** TODO Reset demystified
